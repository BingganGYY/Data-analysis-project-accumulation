######探索性数据分析（EDA）:赛事数据集分析######
######数据简介：2012-2013年比赛数据，球员和裁判的信息，球员：2053名，裁判：3147名，(146028, 28)######
######target：裁判给红牌会不会跟球员的肤色(种族歧视)有关?######
'''
1.两个超级方便的小工具
（1）缺失值：import missingno as msno
（2）报表（data整体+单个特征+两两特征关系）：import pandas_profiling
2.数据读取和预处理
3.数据切分（Tidy data）
4.缺失值的可视化分析
5.单特征的可视化展现
6.多特征之间的关系分析
7.报表可视化
'''
%matplotlib inline
%config InlineBackend.figure_format='retina'

from __future__ import absolute_import, division, print_function # 
import matplotlib as mpl 
from matplotlib import pyplot as plt
from matplotlib.pyplot import GridSpec # 
import seaborn as sns
import numpy as np
import pandas as pd
import os, sys #
from tqdm import tqdm #
import warnings 
warnings.filterwarnings('ignore') # 

sns.set_context("poster", font_scale=1.3) #

import missingno as msno
import pandas_profiling

from sklearn.datasets import make_blobs #
import time

# 2.数据读取和数据预处理
df = pd.read_csv("redcard.csv.gz", compression='gzip') # 特殊格式数据读入，compression：压缩
# 注意流程开始啦~
df.shape
df.head()
df.describe().T # 各个特征的count mean	std	min	25%	50%	75%	max
df.dtypes
all_columns = df.columns.tolist()
# 注意：统计要注重小细节，有运动员出现多条记录，简单的求均值相当于增加该运动员权重
df['height'].mean() 
np.mean(df.groupby('playerShort').height.mean()) # playerShort：区分player的唯一标识

？？？？？？
# 3.数据切分（Tidy data）---便于数据的统计与分析
player_index = 'playerShort' # player unique identifier
player_cols = ['birthday','height','weight','position','photoID','rater1','rater2'] # player 相关字段
# step2：检查数据是否准确，按照playerShort分组后每个数据是否唯一
# 按A进行分组后，对不同列采用不同聚合方法：data.agg({'B':'mean','C':'sum'})
all_cols_unique_players = df.groupby('playerShort').agg({col:'nunique' for col in player_cols})
# If all values are the same per player then this should be empty 
all_cols_unique_players[all_cols_unique_players > 1].dropna().head()
all_cols_unique_players[all_cols_unique_players > 1].dropna().shape[0] == 0
# step2:现成的函数可以调用
def get_subgroup(dataframe, g_index, g_columns):
    """Helper function that creates a sub-table from the columns and runs a quick uniqueness test."""
    g = dataframe.groupby(g_index).agg({col:'nunique' for col in g_columns})
    if g[g > 1].dropna().shape[0] != 0:
        print("Warning: you probably assumed this had all unique values but it doesn't.")
    return dataframe.groupby(g_index).agg({col:'max' for col in g_columns})
players = get_subgroup(df, player_index, player_cols)

def save_subgroup(dataframe, g_index, subgroup_name, prefix='raw_'):
    save_subgroup_filename = "".join([prefix, subgroup_name, ".csv.gz"])
    dataframe.to_csv(save_subgroup_filename, compression='gzip', encoding='UTF-8')
    test_df = pd.read_csv(save_subgroup_filename, compression='gzip', index_col=g_index, encoding='UTF-8')
    # Test that we recover what we send in
    if dataframe.equals(test_df):
        print("Test-passed: we recover the equivalent subgroup dataframe.")
    else:
        print("Warning -- equivalence test!!! Double-check.")
save_subgroup(players, player_index, "players")

# Create Tidy Clubs Table
club_index = 'club'
club_cols = ['leagueCountry']
clubs = get_subgroup(df, club_index, club_cols)
save_subgroup(referees, referee_index, "referees")

4.缺失值的可视化分析
def load_subgroup(filename, index_col=[0]):
    return pd.read_csv(filename, compression='gzip', index_col=index_col)
players = load_subgroup("raw_players.csv.gz")

msno.matrix(players.sample(500),figsize=(16, 7),width_ratios=(15, 1)) # 缺失比例直观图
msno.heatmap(players.sample(500),figsize=(16, 7)) # 缺失相关性热力图

5.单特征的可视化展现
# 交叉表
pd.crosstab(players.rater1, players.rater2) # 交叉表crosstab，按照指定的行和列统计分组频数
fig, ax = plt.subplots(figsize=(12, 8))
sns.heatmap(pd.crosstab(players.rater1, players.rater2), cmap='Blues', annot=True, fmt='d', ax=ax)
ax.set_title("Correlation between Rater 1 and Rater 2\n") # 交叉表结合热力图
fig.tight_layout()
# 柱状图
sns.distplot(players.skintone, kde=False)
MIDSIZE = (12, 8)
fig, ax = plt.subplots(figsize=MIDSIZE)
players.position.value_counts(dropna=False, ascending=True).plot(kind='barh', ax=ax)
ax.set_ylabel("Position")
ax.set_xlabel("Counts")
fig.tight_layout()

6.多特征之间的关系分析
from pandas.tools.plotting import scatter_matrix  # 分散矩阵图 适合多变量 超管用
fig, ax = plt.subplots(figsize=(10, 10))
scatter_matrix(players[['height', 'weight', 'skintone']], alpha=0.2, diagonal='hist', ax=ax)

fig, ax = plt.subplots(figsize=MIDSIZE)
sns.regplot('weight', 'height', data=players, ax=ax)
ax.set_ylabel("Height [cm]")
ax.set_xlabel("Weight [kg]")
fig.tight_layout()

'''
pd.qcut vs pd.cut
rng=np.random.RandomState(42)
factors = rng.randn(30)
print(factors)
print('='*30)
print(pd.cut(factors, 5).value_counts()) # 按照值域划分五等份
print('='*30)
print(pd.qcut(factors, 5).value_counts()) # 按照数值个数划分五等份
'''
# 7.报表可视化---a high level overview
# 超级好用！！！
pandas_profiling.ProfileReport(players)

